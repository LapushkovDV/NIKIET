/*************************************************************************************************\
  Наименование: Настройка алгоритма для контроля цены в накладной на соответствие данным договора
  Контур/Модуль: КОУ
  Примечание:
  Вид работы  |Номер           |Дата    |Исполнитель              |Проект
  -----------------------------------------------------------------------------------------------
\*************************************************************************************************/
/*
*/
#include AlgCalc.vih
#include oAlgFldSys.vih
#include TMnPlan.vih
#include oAlgInDocList.vih
#include Algor.vih

#include Marker.vih
#include GetKau.vih

#component "M_MnPlan"

VipInterface Algoritm_checkallKAUdocs_Setup Implements oAlgoritmSetup;
Interface Algoritm_checkallKAUdocs_Setup 'Алгоритм проверки КАУ  для запрета/разрешения списания', EscClose, Blue;

function getstrkau(_npp : word) : string; forward;
Create view
var nrecFormPl : comp;
select
   getstrkau(1)  (Fieldname =vKau1 )
 , getstrkau(2)  (Fieldname =vKau2 )
 , getstrkau(3)  (Fieldname =vKau3 )
 , getstrkau(4)  (Fieldname =vKau4 )
 , getstrkau(5)  (Fieldname =vKau5 )
 , getstrkau(6)  (Fieldname =vKau6 )
 , getstrkau(7)  (Fieldname =vKau7 )
 , getstrkau(8)  (Fieldname =vKau8 )
 , getstrkau(9)  (Fieldname =vKau9 )
 , getstrkau(10) (Fieldname =vKau10 )
from
   FormPl
 , SpFormPl
 , saldtune
Where
((
                nrecFormPl  == FormPl.NRec
            and FormPl.NRec == spFormPl.cFormPl
      and spFormPl.RESCOMP2[1] == saldtune.nrec
))
;
parameters nrecFormPl;
#include Algoritm_checkKAU_functions.vpp

function getstrkau(_npp : word) : string;
{
 if _npp = 1 {
  result := if(SaldTune.Wobj = 0 ,'-'
             ,if(spFormPl.RESWORD1[_npp] = co_doNotCheckKau, '< Не проверять >' // 0
               ,if(spFormPl.RESWORD1[_npp] = co_FillKau, '< Заполнен >' // 1
                 , if(spFormPl.RESWORD1[_npp] = co_dontFillKau, '< Не заполнен >' //2
                   , if(spFormPl.RESWORD1[_npp] = co_clearlyKAU,'< Явно - ' + ShowKau(SaldTune.Wobj, spFormPl.RESCOMP1[_npp]) + '>','???'))))) //3
  }
  else {
  result := if(SaldTune.WKAU[getkausaldtune(_npp)] = 0 ,'-'
              ,if(spFormPl.RESWORD1[_npp] = co_doNotCheckKau, '< Не проверять >'
                 ,if(spFormPl.RESWORD1[_npp] = co_FillKau, '< Заполнен >'
                    , if(spFormPl.RESWORD1[_npp] = co_dontFillKau, '< Не заполнен >'
                       , if(spFormPl.RESWORD1[_npp] = co_clearlyKAU, '< Явно - ' + ShowKau(SaldTune.WKAU[getkausaldtune(_npp)], spFormPl.RESCOMP1[_npp]) + '>','???')))))
  }
}

screen scMain ;
  show at (,,, 5);
fields
 FormPl.RESWORD[1] : [list 0 'Разрешать', 1 'Запрещать'], protect;
 FormPl.RESWORD[2] : Noprotect;
<<'Настройки алгоритма проверки КАУ в документе'
Алгоритм может использоваться к документам из таблиц katsopr spsopr
Проход будет по specmtr к katsopr и spsopr (ЦУ в позициях накладных/актов)
Алгоритм должен запускать перед формированием ордеров

Ниже выбирается объект ЦУ и значения его аналитики для разрешения и/или запрета (запрет имеет приоритет)
.@@@@@@@@@@@@@@ формирование ордеров если в документе будет комбинации КАУ, не указанная ниже
 [.] - вести лог (в рабочей папке файл вида Algoritm_checkallKAUdocs_YYYYMMDD_HHMMSS.log)`
Если не надо проверять ЦУ в "шапке", то строку с "шапкой" не надо заносить
Условие, когда по всем КАУ стоит "Не проверять" является ошибочным и не будет обрабатываться
>>
end;

#declare setbkcolor(nppkau)
{Font = {backcolor =if( isallNotCheck, colorerror
                        ,if(#nppkau = 1
                           ,if(spFormPl.RESCOMP1[#nppkau] = 0h  and spFormPl.RESWORD1[#nppkau] = 3 , colorneed
                             ,if(SaldTune.wobj <> 0, 0,ColorSysGray)
                             )
                           ,if(spFormPl.RESCOMP1[#nppkau] = 0h  and spFormPl.RESWORD1[#nppkau]= 3 , colorneed
                              ,if(SaldTune.WKAU[getkausaldtune(#nppkau)] <> 0,0, ColorSysGray)
                              )
                           )
                      );
        }
}
#end

browse brspec;
  show at (,6,, );
 table spFormPl;
 fields
  spFormPl.RESWORD2[1]  'Расположение','ЦУ'  :[7], [list 0 'Шапка', 1 'Спецификация'] , protect;
  spFormPl.RESWORD2[2]  'Формирование','ордеров' : [7], [list 0 'Разрешать', 1 'Запрещать'], protect;
  Saldtune.name         'Объект','ЦУ'   :[7], Protect, pickbutton, {Font = {backcolor = if(spFormPl.RESCOMP2[1] = 0h, colorneed,0);}};
//  spFormPl.RESWORD1[1]  'КАУ1','режим'  :[7], [list 0 'Не проверять', 1 'Заполнен', 2 'Не заполнен', 3 'Конкретное значение'] , protect;
    vKau1                 'КАУ1' ,'значение' :[7], Protect, pickbutton, #setbkcolor(1);
//  spFormPl.RESWORD1[2]  'КАУ2'  :[7], [list 0 'Не проверять', 1 'Заполнен', 2 'Не заполнен', 3 'Конкретное значение'] , protect;
    vKau2                 'КАУ2' ,'значение' : [7],Protect, pickbutton, #setbkcolor(2);
//  spFormPl.RESWORD1[3]  'КАУ3'  :[7], [list 0 'Не проверять', 1 'Заполнен', 2 'Не заполнен', 3 'Конкретное значение'] , protect;
    vKau3                 'КАУ3' ,'значение' :[7],  Protect, pickbutton, #setbkcolor(3);
//  spFormPl.RESWORD1[4]  'КАУ4'  : [7], [list 0 'Не проверять', 1 'Заполнен', 2 'Не заполнен', 3 'Конкретное значение'] , protect;
    vKau4                 'КАУ4' ,'значение' :[7],  Protect, pickbutton, #setbkcolor(4);
//  spFormPl.RESWORD1[5]  'КАУ5'  : [7], [list 0 'Не проверять', 1 'Заполнен', 2 'Не заполнен', 3 'Конкретное значение'] , protect;
    vKau5                 'КАУ5' ,'значение' : [7], Protect, pickbutton, #setbkcolor(5);
//  spFormPl.RESWORD1[6]  'КАУ6'  : [7], [list 0 'Не проверять', 1 'Заполнен', 2 'Не заполнен', 3 'Конкретное значение'] , protect;
    vKau6                 'КАУ6' ,'значение' :[7],  Protect, pickbutton, #setbkcolor(6);
//  spFormPl.RESWORD1[7]  'КАУ7'  : [7], [list 0 'Не проверять', 1 'Заполнен', 2 'Не заполнен', 3 'Конкретное значение'] , protect;
    vKau7                 'КАУ7' ,'значение' : [7], Protect, pickbutton, #setbkcolor(7);
//  spFormPl.RESWORD1[8]  'КАУ8'  : [7], [list 0 'Не проверять', 1 'Заполнен', 2 'Не заполнен', 3 'Конкретное значение'] , protect;
    vKau8                 'КАУ8' ,'значение' :[7],  Protect, pickbutton, #setbkcolor(8);
//  spFormPl.RESWORD1[9]  'КАУ9'  : [7], [list 0 'Не проверять', 1 'Заполнен', 2 'Не заполнен', 3 'Конкретное значение'] , protect;
    vKau9                 'КАУ9' ,'значение' :[7],  Protect, pickbutton, #setbkcolor(9);
//  spFormPl.RESWORD1[10] 'КАУ10' : [7], [list 0 'Не проверять', 1 'Заполнен', 2 'Не заполнен', 3 'Конкретное значение'] , protect;
    vKau10                'КАУ10','значение' : [7], Protect, pickbutton, #setbkcolor(10);
end;
TableEvent table spFormPl;
cmSetDefault: {
}
cmInsertRecord:
{
  Insert Current spFormPl;
}
cmUpdateRecord:
{
  Update Current spFormPl;
}
cmDeleteRecord:
{
 if message('Удалить запись?',YesNo)<>cmYes
  { abort; exit;
  }
  delete Current spFormPl;
}
end; //TableEvent table #table



Function RunInter(wflag: Word; Var pt: TRecAcc): Boolean;
{
  Result  := false;

  set nrecFormPl := pt.cFormPl;
  if getfirst FormPl <> tsOK {
     message('Не найдена настройка алгоритма ' + string(nrecFormPl,0,0), error);
     pt.Binding:=8;
     result := false;
     exit;
   }
  result := true;
}

Function asInitInter(p_cFormPl : Comp) : Boolean;
{
  asInitInter := True;
}
//Завершение работы с интерфейсом настройки. Освобождаются переменные.
Function asDoneInter : Boolean;
{
 asDoneInter := True;
}

//Вызывается после создания новой настройки (записи в таблице FormPl). Используется для начальной инициализации полей.
Procedure asOnCmSetDefault;
{

}
//Вызывается после вставки настройки в шаблон документа на закладку "Параметры автоматического формирования \ Алгоритмы". Шаблоны документов хранятся в таблице WayAccou. В данной процедуре заполняются те поля настройки, которые зависят от конкретного шаблона. В нашем примере это поле "Тип документа".
Procedure asOnSetWayAccou(p_cWayAccou : Comp);
{
#__UNUSED__(p_cWayAccou)
}
handleevent
cminit: {
  if getfirst FormPl = tsOK
   if getfirst spFormPl <> tsOK {
     insert current spFormPl;
   }
}
cmpick: {
  case curfield of
    #Saldtune.name : {
     if RunInterface('L_SaldoMtr::GetSaldTune',spFormPl.RESCOMP2[1],word(0)) <> cmCancel
      {
       set spFormPl.RESCOMP2[1]  := spFormPl.RESCOMP2[1];
       set spFormPl.RESCOMP1[2]  := 0h;
       set spFormPl.RESCOMP1[3]  := 0h;
       set spFormPl.RESCOMP1[4]  := 0h;
       set spFormPl.RESCOMP1[5]  := 0h;
       set spFormPl.RESCOMP1[6]  := 0h;
       set spFormPl.RESCOMP1[7]  := 0h;
       set spFormPl.RESCOMP1[8]  := 0h;
       set spFormPl.RESCOMP1[9]  := 0h;
       set spFormPl.RESCOMP1[10] := 0h;
       set spFormPl.RESWORD1[1]  := 0;
       set spFormPl.RESWORD1[2]  := 0;
       set spFormPl.RESWORD1[3]  := 0;
       set spFormPl.RESWORD1[4]  := 0;
       set spFormPl.RESWORD1[5]  := 0;
       set spFormPl.RESWORD1[6]  := 0;
       set spFormPl.RESWORD1[7]  := 0;
       set spFormPl.RESWORD1[8]  := 0;
       set spFormPl.RESWORD1[9]  := 0;
       set spFormPl.RESWORD1[10] := 0;
      };
      updatetable;
     }
#declare selectkau(nppkau)
      if isvalidall(tnSaldTune)
      if #nppkau = 1 {
         if spFormPl.RESWORD1[#nppkau] = 3 // стоит режим = конкретное значение
          if SaldTune.WOBJ <> 0 {
            if iGetkau.GetCodeKau(cgiPickKau, SaldTune.WOBJ, SpFormPl.ResComp1[#nppkau]) <> 0 {
              Set SpFormPl.ResComp1[#nppkau] := SpFormPl.ResComp1[#nppkau];
            }
          }
       }
       else {
         if spFormPl.RESWORD1[#nppkau] = 3 // стоит режим = конкретное значение
          if SaldTune.WOBJ <> 0 {
            if iGetkau.GetCodeKau(cgiPickKau, SaldTune.wkau[getkausaldtune(#nppkau)], SpFormPl.ResComp1[#nppkau]) <> 0 {
              Set SpFormPl.ResComp1[#nppkau] := SpFormPl.ResComp1[#nppkau];
            }
          }
       }
     UpdateTable;
#end
#declare showmenu (nppkau)
 {
  if isvalidall(tnSaldTune)
   if #nppkau = 1 {
       if saldtune.wobj <> 0 then PutHotCommand(RunMenu('mnucheckallkaudocalgorithm'))
     }
     else {
       if saldtune.wkau[getkausaldtune(#nppkau)] <> 0 then PutHotCommand(RunMenu('mnucheckallkaudocalgorithm'))
     }
 }
#end
     #vKau1 : #showmenu(1)
     #vKau2 : #showmenu(2)
     #vKau3 : #showmenu(3)
     #vKau4 : #showmenu(4)
     #vKau5 : #showmenu(5)
     #vKau6 : #showmenu(6)
     #vKau7 : #showmenu(7)
     #vKau8 : #showmenu(8)
     #vKau9 : #showmenu(9)
     #vKau10: #showmenu(10)

  end;
  rereadrecord;
}
cmcheckfield: {
  updatetable;
}
cmValue1: {
  case curfield of
   #vKau1 : set spFormPl.RESWORD1[1]  := 0;
   #vKau2 : set spFormPl.RESWORD1[2]  := 0;
   #vKau3 : set spFormPl.RESWORD1[3]  := 0;
   #vKau4 : set spFormPl.RESWORD1[4]  := 0;
   #vKau5 : set spFormPl.RESWORD1[5]  := 0;
   #vKau6 : set spFormPl.RESWORD1[6]  := 0;
   #vKau7 : set spFormPl.RESWORD1[7]  := 0;
   #vKau8 : set spFormPl.RESWORD1[8]  := 0;
   #vKau9 : set spFormPl.RESWORD1[9]  := 0;
   #vKau10: set spFormPl.RESWORD1[10] := 0;
  end;
 updatetable;
}
cmValue2: {
  case curfield of
   #vKau1 : set spFormPl.RESWORD1[1]  := 1;
   #vKau2 : set spFormPl.RESWORD1[2]  := 1;
   #vKau3 : set spFormPl.RESWORD1[3]  := 1;
   #vKau4 : set spFormPl.RESWORD1[4]  := 1;
   #vKau5 : set spFormPl.RESWORD1[5]  := 1;
   #vKau6 : set spFormPl.RESWORD1[6]  := 1;
   #vKau7 : set spFormPl.RESWORD1[7]  := 1;
   #vKau8 : set spFormPl.RESWORD1[8]  := 1;
   #vKau9 : set spFormPl.RESWORD1[9]  := 1;
   #vKau10: set spFormPl.RESWORD1[10] := 1;
  end;
 updatetable;
}
cmValue3: {
  case curfield of
   #vKau1 : set spFormPl.RESWORD1[1]  := 2;
   #vKau2 : set spFormPl.RESWORD1[2]  := 2;
   #vKau3 : set spFormPl.RESWORD1[3]  := 2;
   #vKau4 : set spFormPl.RESWORD1[4]  := 2;
   #vKau5 : set spFormPl.RESWORD1[5]  := 2;
   #vKau6 : set spFormPl.RESWORD1[6]  := 2;
   #vKau7 : set spFormPl.RESWORD1[7]  := 2;
   #vKau8 : set spFormPl.RESWORD1[8]  := 2;
   #vKau9 : set spFormPl.RESWORD1[9]  := 2;
   #vKau10: set spFormPl.RESWORD1[10] := 2;
  end;
 updatetable;
}
cmValue4: {
  case curfield of
   #vKau1 : {
       set spFormPl.RESWORD1[1]  := 3;
       #selectkau(1)
      }
   #vKau2 : {
       set spFormPl.RESWORD1[2]  := 3;
       #selectkau(2)
      }
   #vKau3 : {
       set spFormPl.RESWORD1[3]  := 3;
       #selectkau(3)
      }
   #vKau4 : {
       set spFormPl.RESWORD1[4]  := 3;
       #selectkau(4)
      }
   #vKau5 : {
       set spFormPl.RESWORD1[5]  := 3;
       #selectkau(5)
      }
   #vKau6 : {
       set spFormPl.RESWORD1[6]  := 3;
       #selectkau(6)
      }
   #vKau7 : {
       set spFormPl.RESWORD1[7]  := 3;
       #selectkau(7)
      }
   #vKau8 : {
       set spFormPl.RESWORD1[8]  := 3;
       #selectkau(8)
      }
   #vKau9 : {
       set spFormPl.RESWORD1[9]  := 3;
       #selectkau(9)
      }
   #vKau10: {
       set spFormPl.RESWORD1[10]  := 3;
       #selectkau(10)
      }
  end;
 updatetable;
}

end;
End.

mnucheckallkaudocalgorithm menu
{
 - 'Не проверять'        , cmValue1;
 - 'Заполнен'            , cmValue2;
 - 'Не заполнен'         , cmValue3;
 - 'Конкретное значение' , cmValue4;
}
