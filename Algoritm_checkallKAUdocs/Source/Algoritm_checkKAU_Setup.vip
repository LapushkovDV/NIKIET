/*************************************************************************************************\
  Наименование: Настройка алгоритма для контроля цены в накладной на соответствие данным договора
  Контур/Модуль: КОУ
  Примечание:
  Вид работы  |Номер           |Дата    |Исполнитель              |Проект
  -----------------------------------------------------------------------------------------------
\*************************************************************************************************/
/*
*/
#include AlgCalc.vih
#include oAlgFldSys.vih
#include TMnPlan.vih
#include oAlgInDocList.vih
#include Algor.vih

#include Marker.vih
#include GetKau.vih

#component "M_MnPlan"

VipInterface Algoritm_checkallKAUdocs_Setup Implements oAlgoritmSetup;
Interface Algoritm_checkallKAUdocs_Setup 'Алгоритм проверки КАУ  для запрета/разрешения списания', EscClose, Blue;

Create view
var nrecFormPl : comp;
select
   if(SaldTune.WOBJ = 0   , '-', ShowKau(SaldTune.WOBJ   , spFormPl.RESCOMP1[1]  )) (Fieldname =vKau1 )
 , if(SaldTune.WKAU[1] = 0, '-', ShowKau(SaldTune.WKAU[1], spFormPl.RESCOMP1[2]  )) (Fieldname =vKau2 )
 , if(SaldTune.WKAU[2] = 0, '-', ShowKau(SaldTune.WKAU[2], spFormPl.RESCOMP1[3]  )) (Fieldname =vKau3 )
 , if(SaldTune.WKAU[3] = 0, '-', ShowKau(SaldTune.WKAU[3], spFormPl.RESCOMP1[4]  )) (Fieldname =vKau4 )
 , if(SaldTune.WKAU[4] = 0, '-', ShowKau(SaldTune.WKAU[4], spFormPl.RESCOMP1[5]  )) (Fieldname =vKau5 )
 , if(SaldTune.WKAU[5] = 0, '-', ShowKau(SaldTune.WKAU[5], spFormPl.RESCOMP1[6]  )) (Fieldname =vKau6 )
 , if(SaldTune.WKAU[6] = 0, '-', ShowKau(SaldTune.WKAU[6], spFormPl.RESCOMP1[7]  )) (Fieldname =vKau7 )
 , if(SaldTune.WKAU[7] = 0, '-', ShowKau(SaldTune.WKAU[7], spFormPl.RESCOMP1[8]  )) (Fieldname =vKau8 )
 , if(SaldTune.WKAU[8] = 0, '-', ShowKau(SaldTune.WKAU[8], spFormPl.RESCOMP1[9]  )) (Fieldname =vKau9 )
 , if(SaldTune.WKAU[9] = 0, '-', ShowKau(SaldTune.WKAU[9], spFormPl.RESCOMP1[10] )) (Fieldname =vKau10 )
from
   FormPl
 , SpFormPl
 , saldtune
Where
((
                nrecFormPl  == FormPl.NRec
      and FormPl.RESCOMP[1] == saldtune.nrec
            and FormPl.NRec == spFormPl.cFormPl
))
;
parameters nrecFormPl;

screen scMain ;
  show at (,,, 5);
fields
 FormPl.RESWORD[1] : [list 0 'Запрещать', 1 'Разрешать'], protect;
<<'Настройки алгоритма проверки КАУ в документе'
Алгоритм может использоваться к документам из таблиц katsopr spsopr
Проход будет по specmtr к katsopr и spsopr (ЦУ в позициях накладных/актов)
Алгоритм должен запускать перед формированием ордеров

Ниже выбирается объект ЦУ и значения его аналитики для разрешения и/или запрета (запрет имеет приоритет)
.@@@@@@@@@@@@@@ формирование ордеров если в документе будет комбинации КАУ, не указанная ниже
>>
end;
browse brspec;
  show at (,6,, );
 table spFormPl;
 fields
  spFormPl.RESWORD2[1]  'Расположение','ЦУ'  : [list 0 'Шапка', 1 'Спецификация'] , protect;
  Saldtune.name         'Объект','ЦУ'   : Protect, pickbutton, {Font = {backcolor = if(spFormPl.RESCOMP2[1] = 0h, colorneed,0);}};
  spFormPl.RESWORD1[1]  'КАУ1','режим'  : [list 0 'Не проверять', 1 'Заполнен', 2 'Не заполнен', 3 'Конкретное значение'] , protect;
  vKau1                 'КАУ1' ,'значение' : Protect, pickbutton, {Font = {backcolor = if(spFormPl.RESCOMP1[1] = 0h  and SaldTune.WOBJ <> 0  , colorneed,0);}};
  spFormPl.RESWORD1[2]  'КАУ2'  : [list 0 'Не проверять', 1 'Заполнен', 2 'Не заполнен', 3 'Конкретное значение'] , protect;
  vKau2                 'КАУ2' ,'значение' : Protect, pickbutton, {Font = {backcolor = if(spFormPl.RESCOMP1[2] = 0h  and SaldTune.WKAU[1] <> 0, colorneed,0);}};
  spFormPl.RESWORD1[3]  'КАУ3'  : [list 0 'Не проверять', 1 'Заполнен', 2 'Не заполнен', 3 'Конкретное значение'] , protect;
  vKau3                 'КАУ3' ,'значение' : Protect, pickbutton, {Font = {backcolor = if(spFormPl.RESCOMP1[3] = 0h  and SaldTune.WKAU[2] <> 0, colorneed,0);}};
  spFormPl.RESWORD1[4]  'КАУ4'  : [list 0 'Не проверять', 1 'Заполнен', 2 'Не заполнен', 3 'Конкретное значение'] , protect;
  vKau4                 'КАУ4' ,'значение' : Protect, pickbutton, {Font = {backcolor = if(spFormPl.RESCOMP1[4] = 0h  and SaldTune.WKAU[3] <> 0, colorneed,0);}};
  spFormPl.RESWORD1[5]  'КАУ5'  : [list 0 'Не проверять', 1 'Заполнен', 2 'Не заполнен', 3 'Конкретное значение'] , protect;
  vKau5                 'КАУ5' ,'значение' : Protect, pickbutton, {Font = {backcolor = if(spFormPl.RESCOMP1[5] = 0h  and SaldTune.WKAU[4] <> 0, colorneed,0);}};
  spFormPl.RESWORD1[6]  'КАУ6'  : [list 0 'Не проверять', 1 'Заполнен', 2 'Не заполнен', 3 'Конкретное значение'] , protect;
  vKau6                 'КАУ6' ,'значение' : Protect, pickbutton, {Font = {backcolor = if(spFormPl.RESCOMP1[6] = 0h  and SaldTune.WKAU[5] <> 0, colorneed,0);}};
  spFormPl.RESWORD1[7]  'КАУ7'  : [list 0 'Не проверять', 1 'Заполнен', 2 'Не заполнен', 3 'Конкретное значение'] , protect;
  vKau7                 'КАУ7' ,'значение' : Protect, pickbutton, {Font = {backcolor = if(spFormPl.RESCOMP1[7] = 0h  and SaldTune.WKAU[6] <> 0, colorneed,0);}};
  spFormPl.RESWORD1[8]  'КАУ8'  : [list 0 'Не проверять', 1 'Заполнен', 2 'Не заполнен', 3 'Конкретное значение'] , protect;
  vKau8                 'КАУ8' ,'значение' : Protect, pickbutton, {Font = {backcolor = if(spFormPl.RESCOMP1[8] = 0h  and SaldTune.WKAU[7] <> 0, colorneed,0);}};
  spFormPl.RESWORD1[9]  'КАУ9'  : [list 0 'Не проверять', 1 'Заполнен', 2 'Не заполнен', 3 'Конкретное значение'] , protect;
  vKau9                 'КАУ9' ,'значение' : Protect, pickbutton, {Font = {backcolor = if(spFormPl.RESCOMP1[9] = 0h  and SaldTune.WKAU[8] <> 0, colorneed,0);}};
  spFormPl.RESWORD1[10] 'КАУ10' : [list 0 'Не проверять', 1 'Заполнен', 2 'Не заполнен', 3 'Конкретное значение'] , protect;
  vKau10                'КАУ10','значение' : Protect, pickbutton, {Font = {backcolor = if(spFormPl.RESCOMP1[10] = 0h and SaldTune.WKAU[9] <> 0, colorneed,0);}};
  spFormPl.RESWORD2[2]  'Формирование','ордеров' : [list 0 'Запрещать', 1 'Разрешать'], protect;
end;



Function RunInter(wflag: Word; Var pt: TRecAcc): Boolean;
{
  Result  := false;

  set nrecFormPl := pt.cFormPl;
  if getfirst FormPl <> tsOK {
     message('Не найдена настройка алгоритма ' + string(nrecFormPl,0,0), error);
     pt.Binding:=8;
     result := false;
     exit;
   }
  result := true;
}

Function asInitInter(p_cFormPl : Comp) : Boolean;
{
  asInitInter := True;
}
//Завершение работы с интерфейсом настройки. Освобождаются переменные.
Function asDoneInter : Boolean;
{
 asDoneInter := True;
}

//Вызывается после создания новой настройки (записи в таблице FormPl). Используется для начальной инициализации полей.
Procedure asOnCmSetDefault;
{

}
//Вызывается после вставки настройки в шаблон документа на закладку "Параметры автоматического формирования \ Алгоритмы". Шаблоны документов хранятся в таблице WayAccou. В данной процедуре заполняются те поля настройки, которые зависят от конкретного шаблона. В нашем примере это поле "Тип документа".
Procedure asOnSetWayAccou(p_cWayAccou : Comp);
{
#__UNUSED__(p_cWayAccou)
}
handleevent
cminit: {
  if getfirst FormPl = tsOK
   if getfirst spFormPl <> tsOK {
     insert current spFormPl;
   }
}
cmcheckfield: {
  message('cmcheckfield');
  updatetable;
}
end;
End.
